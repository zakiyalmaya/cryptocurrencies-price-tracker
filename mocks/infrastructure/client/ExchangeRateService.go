// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExchangeRateService is a mock of ExchangeRateService interface.
type MockExchangeRateService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateServiceMockRecorder
}

// MockExchangeRateServiceMockRecorder is the mock recorder for MockExchangeRateService.
type MockExchangeRateServiceMockRecorder struct {
	mock *MockExchangeRateService
}

// NewMockExchangeRateService creates a new mock instance.
func NewMockExchangeRateService(ctrl *gomock.Controller) *MockExchangeRateService {
	mock := &MockExchangeRateService{ctrl: ctrl}
	mock.recorder = &MockExchangeRateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateService) EXPECT() *MockExchangeRateServiceMockRecorder {
	return m.recorder
}

// GetLatest mocks base method.
func (m *MockExchangeRateService) GetLatest(base, to string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", base, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockExchangeRateServiceMockRecorder) GetLatest(base, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockExchangeRateService)(nil).GetLatest), base, to)
}
